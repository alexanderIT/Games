namespace BattleshipGame
{
    using System;
    using System.Collections.Generic;
    using BattleshipGame.Contracts;
    using System.Threading;
    public class GenarateRandomBattleShip : IGenarateRandomBattleShip
    {
        const char BATTLESHIP = 'S';
        const string EMPTYSTRING = " ";

        /// <summary>
        /// List of integers which GetRandomPosition method use.
        /// </summary>
        public List<int> MatrixElements {get; set;}

        /// <summary>
        /// Bool array which ChangeDestroyedPossitionAndTheNeighborhood method use to check is the get coordinates is mark. 
        /// </summary>
        public bool[,] matrix = new bool[10, 10];


        public GenarateRandomBattleShip()
        {
            this.MatrixElements=new List<int>();

            for (int i = 0; i < 100; i++)
            {
               this.MatrixElements.Add(i);
            }
        }

        /// <summary>
        /// Fill coordinates of generated by GenerateShipsForMatrix method with ships. 
        /// </summary>
        /// <param name="coordinates">List of lists contains coordinates of any kind ships (Destroyer or Battleship).</param>
        /// <param name="gameBoard">Field of chars which fill ships. </param>
        /// <returns>Returns this field with ships.</returns>
        public char[,] FillShipsInBoard(List<List<string>> coordinates, char[,] gameBoard)
        {
            List<List<string>> coordinate = coordinates;
            char[,] board = gameBoard;
            for (int i = 0; i < coordinates.Count; i++)
            {
                foreach (var item in coordinates[i])
                {
                    var currentSpot = item.Split();
                    int x = int.Parse(currentSpot[0]);
                    int y = int.Parse(currentSpot[1]);
                    board[x, y] = BATTLESHIP;
                }
            }
            return board;
        }

        /// <summary>
        /// Get a list with position of two four squares Destroyer and one Battleship.
        /// </summary>
        /// <returns>Return list of lists of coordinates.</returns>
        public List<List<string>> GenerateShipsForMatrix()
        {
            
            List<List<string>> allShips = new List<List<string>>();

            Thread.Sleep(10);
            allShips.Add(this.GenerateFourSquareDestroyer());
            Thread.Sleep(20);
            allShips.Add(this.GenerateFourSquareDestroyer());
            Thread.Sleep(20);           
            allShips.Add(this.GenerateFiveSquareShip());

            return allShips;
        }

        /// <summary>
        /// Generate Destroyer on the grid  with the size four square.
        /// </summary>
        /// <returns>Return list with random generate square of Destroyer.</returns>
        public List<string> GenerateFourSquareDestroyer()
        {
            List<string> ships = new List<string>();
            Random rand = new Random();
            ShipPosition shipPosition = this.GenerateShipPosition();

            int xCoordinate = rand.Next(2, 9);
            int yCoordinate = rand.Next(2, 9);

            string firstCoordinate = xCoordinate.ToString() + " " + yCoordinate.ToString();
            if (shipPosition == ShipPosition.Vertical)
            {
                string secondCoordinate = (xCoordinate - 1).ToString() + EMPTYSTRING + yCoordinate.ToString();
                string thirdCoordinate = (xCoordinate - 2).ToString() + EMPTYSTRING + yCoordinate.ToString();
                string forthCoordinate = (xCoordinate + 1).ToString() + EMPTYSTRING + yCoordinate.ToString();

                ships.Add(firstCoordinate);
                ships.Add(secondCoordinate);
                ships.Add(thirdCoordinate);
                ships.Add(forthCoordinate);

                this.ChangeDestroyedPossitionAndTheNeighborhood(firstCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(secondCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(thirdCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(forthCoordinate);
            }
            else
            {
                string secondCoordinate = xCoordinate.ToString() + EMPTYSTRING + (yCoordinate - 1).ToString();
                string thirdCoordinate = xCoordinate.ToString() + EMPTYSTRING + (yCoordinate - 2).ToString();
                string forthCoordinate = xCoordinate.ToString() + EMPTYSTRING + (yCoordinate + 1).ToString();

                ships.Add(firstCoordinate);
                ships.Add(secondCoordinate);
                ships.Add(thirdCoordinate);
                ships.Add(forthCoordinate);

                this.ChangeDestroyedPossitionAndTheNeighborhood(firstCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(secondCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(thirdCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(forthCoordinate);
            }

            return ships;
        }

        /// <summary>
        /// Generate Battleship on the grid  with the size five square.
        /// </summary>
        /// <returns>Return list with random generate square of Battleship.</returns>
        public List<string> GenerateFiveSquareShip()
        {
            List<string> ships = new List<string>();
            Random rand = new Random();
            ShipPosition shipPosition = this.GenerateShipPosition();

            int xCoordinate = rand.Next(2, 7);
            int yCoordinate = rand.Next(2, 7);

            string firstCoordinate = xCoordinate.ToString() + EMPTYSTRING + yCoordinate.ToString();
            if (shipPosition == ShipPosition.Vertical)
            {
                string secondCoordinate = (xCoordinate - 1).ToString() + EMPTYSTRING + yCoordinate.ToString();
                string thirdCoordinate = (xCoordinate - 2).ToString() + EMPTYSTRING + yCoordinate.ToString();
                string forthCoordinate = (xCoordinate + 1).ToString() + EMPTYSTRING + yCoordinate.ToString();
                string fiveCoordinate = (xCoordinate + 2).ToString() + EMPTYSTRING + yCoordinate.ToString();

                ships.Add(firstCoordinate);
                ships.Add(secondCoordinate);
                ships.Add(thirdCoordinate);
                ships.Add(forthCoordinate);
                ships.Add(fiveCoordinate);

                this.ChangeDestroyedPossitionAndTheNeighborhood(firstCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(secondCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(thirdCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(forthCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(fiveCoordinate);
            }
            else
            {
                string secondCoordinate = xCoordinate.ToString() + EMPTYSTRING + (yCoordinate - 1).ToString();
                string thirdCoordinate = xCoordinate.ToString() + EMPTYSTRING + (yCoordinate - 2).ToString();
                string forthCoordinate = xCoordinate.ToString() + EMPTYSTRING + (yCoordinate + 1).ToString();
                string fiveCoordinate = xCoordinate.ToString() + EMPTYSTRING + (yCoordinate + 2).ToString();

                ships.Add(firstCoordinate);
                ships.Add(secondCoordinate);
                ships.Add(thirdCoordinate);
                ships.Add(forthCoordinate);
                ships.Add(fiveCoordinate);

                this.ChangeDestroyedPossitionAndTheNeighborhood(firstCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(secondCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(thirdCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(forthCoordinate);
                this.ChangeDestroyedPossitionAndTheNeighborhood(fiveCoordinate);
            }

            return ships;
        }

        /// <summary>
        /// Generate random position of ShipPosition.
        /// </summary>
        /// <returns>Return position.</returns>
        private ShipPosition GenerateShipPosition()
        {
            Random rand = new Random();
            ShipPosition shipPosition;
            int position = rand.Next(0, 2);

            if (position == 0)
            {
                shipPosition = ShipPosition.Horizontal;
            }
            else
            {
                shipPosition = ShipPosition.Vertical;
            }

            return shipPosition;
        }

        /// <summary>
        /// Get random generate coordinates.
        /// </summary>
        /// <returns>Return coordinates.</returns>
        private int GetRandomPosition()
        {
            Random rand = new Random();
            string coordinatesStr = string.Empty;
            int possition = rand.Next(MatrixElements.Count);
            int coordinates = this.MatrixElements[possition];

            return coordinates;
        }

        /// <summary>
        /// Remove used elements from list of interger with given coordinates.
        /// </summary>
        /// <param name="xCoordinate">X coordinates of matrix.</param>
        /// <param name="yCoordinate">Y coordinates of matrix.</param>
        public void RemoveUsedElementsFromList(int xCoordinate, int yCoordinate)
        {
            string numberAsStr = xCoordinate.ToString() + yCoordinate.ToString();
            int coordinateNumber = int.Parse(numberAsStr);
            int position = this.MatrixElements.BinarySearch(coordinateNumber);
            if (position < 0)
            {
                return;
            }

            this.MatrixElements.RemoveAt(position);
        }

        /// <summary>
        /// Mark the coordinate in matrix with visited and remove the current position from list of integer MatrixElements.
        /// </summary>
        /// <param name="coordinate">String with x and y coordinate.</param>
        public void ChangeDestroyedPossitionAndTheNeighborhood(string coordinate)
        {
            string[] coordinatesArr = coordinate.Split(' ');
            int xCoordinate = int.Parse(coordinatesArr[0]);
            int yCoordinate = int.Parse(coordinatesArr[1]);
            this.matrix[xCoordinate, yCoordinate] = true;
            this.RemoveUsedElementsFromList(xCoordinate, yCoordinate);
            
            if (IsPositionInTheMatrix(xCoordinate - 1, yCoordinate - 1))
            {
                this.matrix[xCoordinate - 1, yCoordinate - 1] = true;
                this.RemoveUsedElementsFromList(xCoordinate - 1, yCoordinate - 1);
            }

            if (IsPositionInTheMatrix(xCoordinate - 1, yCoordinate))
            {
                this.matrix[xCoordinate - 1, yCoordinate] = true;
                this.RemoveUsedElementsFromList(xCoordinate - 1, yCoordinate);
            }

            if (IsPositionInTheMatrix(xCoordinate - 1, yCoordinate + 1))
            {
                this.matrix[xCoordinate - 1, yCoordinate + 1] = true;
                this.RemoveUsedElementsFromList(xCoordinate - 1, yCoordinate + 1);
            }

            if (IsPositionInTheMatrix(xCoordinate, yCoordinate - 1))
            {
                this.matrix[xCoordinate, yCoordinate - 1] = true;
                this.RemoveUsedElementsFromList(xCoordinate, yCoordinate - 1);
            }

            if (IsPositionInTheMatrix(xCoordinate, yCoordinate + 1))
            {
                this.matrix[xCoordinate, yCoordinate + 1] = true;
                this.RemoveUsedElementsFromList(xCoordinate, yCoordinate + 1);
            }

            if (IsPositionInTheMatrix(xCoordinate + 1, yCoordinate - 1))
            {
                this.matrix[xCoordinate + 1, yCoordinate - 1] = true;
                this.RemoveUsedElementsFromList(xCoordinate + 1, yCoordinate - 1);
            }

            if (IsPositionInTheMatrix(xCoordinate + 1, yCoordinate))
            {
                this.matrix[xCoordinate + 1, yCoordinate] = true;
                this.RemoveUsedElementsFromList(xCoordinate + 1, yCoordinate);
            }

            if (IsPositionInTheMatrix(xCoordinate + 1, yCoordinate + 1))
            {
                this.matrix[xCoordinate + 1, yCoordinate + 1] = true;
                this.RemoveUsedElementsFromList(xCoordinate + 1, yCoordinate + 1);
            }
        }

        /// <summary>
        /// Check is the given coordinates is in the matrix grid (10,10).
        /// </summary>
        /// <param name="xCoordinate"></param>
        /// <param name="yCoordinate"></param>
        /// <returns></returns>
        public bool IsPositionInTheMatrix(int xCoordinate, int yCoordinate)
        {
            if (xCoordinate > 9 || xCoordinate < 0 || yCoordinate > 9 || yCoordinate < 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
    }
}


